# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  isAdmin: Boolean
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  isAdmin: Boolean
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  isAdmin: Boolean
  password: String
  createdAt: DateTime
}

type Place {
  id: ID!
  featured: Boolean
  name: String
  address: String
  website: String
  neighborhood: PlaceNeighborhood
  image: CloudinaryImage_File
  description: Place_description_Document
  mainCategory: PlaceCategory
  subCategory: PlaceCategory
  time(where: PlaceTimeWhereInput! = {}, orderBy: [PlaceTimeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlaceTimeWhereUniqueInput): [PlaceTime!]
  timeCount(where: PlaceTimeWhereInput! = {}): Int
  details(where: PlaceDetailWhereInput! = {}, orderBy: [PlaceDetailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlaceDetailWhereUniqueInput): [PlaceDetail!]
  detailsCount(where: PlaceDetailWhereInput! = {}): Int
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

type Place_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PlaceWhereUniqueInput {
  id: ID
  name: String
}

input PlaceWhereInput {
  AND: [PlaceWhereInput!]
  OR: [PlaceWhereInput!]
  NOT: [PlaceWhereInput!]
  id: IDFilter
  featured: BooleanFilter
  name: StringFilter
  address: StringFilter
  website: StringFilter
  neighborhood: PlaceNeighborhoodWhereInput
  mainCategory: PlaceCategoryWhereInput
  subCategory: PlaceCategoryWhereInput
  time: PlaceTimeManyRelationFilter
  details: PlaceDetailManyRelationFilter
}

input PlaceTimeManyRelationFilter {
  every: PlaceTimeWhereInput
  some: PlaceTimeWhereInput
  none: PlaceTimeWhereInput
}

input PlaceDetailManyRelationFilter {
  every: PlaceDetailWhereInput
  some: PlaceDetailWhereInput
  none: PlaceDetailWhereInput
}

input PlaceOrderByInput {
  id: OrderDirection
  featured: OrderDirection
  name: OrderDirection
  address: OrderDirection
  website: OrderDirection
}

input PlaceUpdateInput {
  featured: Boolean
  name: String
  address: String
  website: String
  neighborhood: PlaceNeighborhoodRelateToOneForUpdateInput
  image: Upload
  description: JSON
  mainCategory: PlaceCategoryRelateToOneForUpdateInput
  subCategory: PlaceCategoryRelateToOneForUpdateInput
  time: PlaceTimeRelateToManyForUpdateInput
  details: PlaceDetailRelateToManyForUpdateInput
}

input PlaceNeighborhoodRelateToOneForUpdateInput {
  create: PlaceNeighborhoodCreateInput
  connect: PlaceNeighborhoodWhereUniqueInput
  disconnect: Boolean
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input PlaceCategoryRelateToOneForUpdateInput {
  create: PlaceCategoryCreateInput
  connect: PlaceCategoryWhereUniqueInput
  disconnect: Boolean
}

input PlaceTimeRelateToManyForUpdateInput {
  disconnect: [PlaceTimeWhereUniqueInput!]
  set: [PlaceTimeWhereUniqueInput!]
  create: [PlaceTimeCreateInput!]
  connect: [PlaceTimeWhereUniqueInput!]
}

input PlaceDetailRelateToManyForUpdateInput {
  disconnect: [PlaceDetailWhereUniqueInput!]
  set: [PlaceDetailWhereUniqueInput!]
  create: [PlaceDetailCreateInput!]
  connect: [PlaceDetailWhereUniqueInput!]
}

input PlaceUpdateArgs {
  where: PlaceWhereUniqueInput!
  data: PlaceUpdateInput!
}

input PlaceCreateInput {
  featured: Boolean
  name: String
  address: String
  website: String
  neighborhood: PlaceNeighborhoodRelateToOneForCreateInput
  image: Upload
  description: JSON
  mainCategory: PlaceCategoryRelateToOneForCreateInput
  subCategory: PlaceCategoryRelateToOneForCreateInput
  time: PlaceTimeRelateToManyForCreateInput
  details: PlaceDetailRelateToManyForCreateInput
}

input PlaceNeighborhoodRelateToOneForCreateInput {
  create: PlaceNeighborhoodCreateInput
  connect: PlaceNeighborhoodWhereUniqueInput
}

input PlaceCategoryRelateToOneForCreateInput {
  create: PlaceCategoryCreateInput
  connect: PlaceCategoryWhereUniqueInput
}

input PlaceTimeRelateToManyForCreateInput {
  create: [PlaceTimeCreateInput!]
  connect: [PlaceTimeWhereUniqueInput!]
}

input PlaceDetailRelateToManyForCreateInput {
  create: [PlaceDetailCreateInput!]
  connect: [PlaceDetailWhereUniqueInput!]
}

type PlaceTime {
  id: ID!
  day: String
  time: String
}

input PlaceTimeWhereUniqueInput {
  id: ID
}

input PlaceTimeWhereInput {
  AND: [PlaceTimeWhereInput!]
  OR: [PlaceTimeWhereInput!]
  NOT: [PlaceTimeWhereInput!]
  id: IDFilter
  day: StringNullableFilter
  time: StringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input PlaceTimeOrderByInput {
  id: OrderDirection
  day: OrderDirection
  time: OrderDirection
}

input PlaceTimeUpdateInput {
  day: String
  time: String
}

input PlaceTimeUpdateArgs {
  where: PlaceTimeWhereUniqueInput!
  data: PlaceTimeUpdateInput!
}

input PlaceTimeCreateInput {
  day: String
  time: String
}

type PlaceNeighborhood {
  id: ID!
  name: String
}

input PlaceNeighborhoodWhereUniqueInput {
  id: ID
  name: String
}

input PlaceNeighborhoodWhereInput {
  AND: [PlaceNeighborhoodWhereInput!]
  OR: [PlaceNeighborhoodWhereInput!]
  NOT: [PlaceNeighborhoodWhereInput!]
  id: IDFilter
  name: StringFilter
}

input PlaceNeighborhoodOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input PlaceNeighborhoodUpdateInput {
  name: String
}

input PlaceNeighborhoodUpdateArgs {
  where: PlaceNeighborhoodWhereUniqueInput!
  data: PlaceNeighborhoodUpdateInput!
}

input PlaceNeighborhoodCreateInput {
  name: String
}

type PlaceDetail {
  id: ID!
  name: String
}

input PlaceDetailWhereUniqueInput {
  id: ID
  name: String
}

input PlaceDetailWhereInput {
  AND: [PlaceDetailWhereInput!]
  OR: [PlaceDetailWhereInput!]
  NOT: [PlaceDetailWhereInput!]
  id: IDFilter
  name: StringFilter
}

input PlaceDetailOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input PlaceDetailUpdateInput {
  name: String
}

input PlaceDetailUpdateArgs {
  where: PlaceDetailWhereUniqueInput!
  data: PlaceDetailUpdateInput!
}

input PlaceDetailCreateInput {
  name: String
}

type PlaceCategory {
  id: ID!
  name: String
}

input PlaceCategoryWhereUniqueInput {
  id: ID
  name: String
}

input PlaceCategoryWhereInput {
  AND: [PlaceCategoryWhereInput!]
  OR: [PlaceCategoryWhereInput!]
  NOT: [PlaceCategoryWhereInput!]
  id: IDFilter
  name: StringFilter
}

input PlaceCategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input PlaceCategoryUpdateInput {
  name: String
}

input PlaceCategoryUpdateArgs {
  where: PlaceCategoryWhereUniqueInput!
  data: PlaceCategoryUpdateInput!
}

input PlaceCategoryCreateInput {
  name: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPlace(data: PlaceCreateInput!): Place
  createPlaces(data: [PlaceCreateInput!]!): [Place]
  updatePlace(where: PlaceWhereUniqueInput!, data: PlaceUpdateInput!): Place
  updatePlaces(data: [PlaceUpdateArgs!]!): [Place]
  deletePlace(where: PlaceWhereUniqueInput!): Place
  deletePlaces(where: [PlaceWhereUniqueInput!]!): [Place]
  createPlaceTime(data: PlaceTimeCreateInput!): PlaceTime
  createPlaceTimes(data: [PlaceTimeCreateInput!]!): [PlaceTime]
  updatePlaceTime(where: PlaceTimeWhereUniqueInput!, data: PlaceTimeUpdateInput!): PlaceTime
  updatePlaceTimes(data: [PlaceTimeUpdateArgs!]!): [PlaceTime]
  deletePlaceTime(where: PlaceTimeWhereUniqueInput!): PlaceTime
  deletePlaceTimes(where: [PlaceTimeWhereUniqueInput!]!): [PlaceTime]
  createPlaceNeighborhood(data: PlaceNeighborhoodCreateInput!): PlaceNeighborhood
  createPlaceNeighborhoods(data: [PlaceNeighborhoodCreateInput!]!): [PlaceNeighborhood]
  updatePlaceNeighborhood(where: PlaceNeighborhoodWhereUniqueInput!, data: PlaceNeighborhoodUpdateInput!): PlaceNeighborhood
  updatePlaceNeighborhoods(data: [PlaceNeighborhoodUpdateArgs!]!): [PlaceNeighborhood]
  deletePlaceNeighborhood(where: PlaceNeighborhoodWhereUniqueInput!): PlaceNeighborhood
  deletePlaceNeighborhoods(where: [PlaceNeighborhoodWhereUniqueInput!]!): [PlaceNeighborhood]
  createPlaceDetail(data: PlaceDetailCreateInput!): PlaceDetail
  createPlaceDetails(data: [PlaceDetailCreateInput!]!): [PlaceDetail]
  updatePlaceDetail(where: PlaceDetailWhereUniqueInput!, data: PlaceDetailUpdateInput!): PlaceDetail
  updatePlaceDetails(data: [PlaceDetailUpdateArgs!]!): [PlaceDetail]
  deletePlaceDetail(where: PlaceDetailWhereUniqueInput!): PlaceDetail
  deletePlaceDetails(where: [PlaceDetailWhereUniqueInput!]!): [PlaceDetail]
  createPlaceCategory(data: PlaceCategoryCreateInput!): PlaceCategory
  createPlaceCategories(data: [PlaceCategoryCreateInput!]!): [PlaceCategory]
  updatePlaceCategory(where: PlaceCategoryWhereUniqueInput!, data: PlaceCategoryUpdateInput!): PlaceCategory
  updatePlaceCategories(data: [PlaceCategoryUpdateArgs!]!): [PlaceCategory]
  deletePlaceCategory(where: PlaceCategoryWhereUniqueInput!): PlaceCategory
  deletePlaceCategories(where: [PlaceCategoryWhereUniqueInput!]!): [PlaceCategory]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  places(where: PlaceWhereInput! = {}, orderBy: [PlaceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlaceWhereUniqueInput): [Place!]
  place(where: PlaceWhereUniqueInput!): Place
  placesCount(where: PlaceWhereInput! = {}): Int
  placeTimes(where: PlaceTimeWhereInput! = {}, orderBy: [PlaceTimeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlaceTimeWhereUniqueInput): [PlaceTime!]
  placeTime(where: PlaceTimeWhereUniqueInput!): PlaceTime
  placeTimesCount(where: PlaceTimeWhereInput! = {}): Int
  placeNeighborhoods(where: PlaceNeighborhoodWhereInput! = {}, orderBy: [PlaceNeighborhoodOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlaceNeighborhoodWhereUniqueInput): [PlaceNeighborhood!]
  placeNeighborhood(where: PlaceNeighborhoodWhereUniqueInput!): PlaceNeighborhood
  placeNeighborhoodsCount(where: PlaceNeighborhoodWhereInput! = {}): Int
  placeDetails(where: PlaceDetailWhereInput! = {}, orderBy: [PlaceDetailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlaceDetailWhereUniqueInput): [PlaceDetail!]
  placeDetail(where: PlaceDetailWhereUniqueInput!): PlaceDetail
  placeDetailsCount(where: PlaceDetailWhereInput! = {}): Int
  placeCategories(where: PlaceCategoryWhereInput! = {}, orderBy: [PlaceCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlaceCategoryWhereUniqueInput): [PlaceCategory!]
  placeCategory(where: PlaceCategoryWhereUniqueInput!): PlaceCategory
  placeCategoriesCount(where: PlaceCategoryWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
